First Presentation - Data Backgrounding

Guiding Question:
What early career stats help predict a player's upward or downward career trajectory over time? 

There are many subquestions that can be asked within this based on numerous factors. Is there a 'year' that players must be producing by until teams give up on them? Is instant success or gradual improvement better? What about their role/usage? 


I plan on using data from the 2003 season to the present day (had to include LeBron's rookie year), and collecting it from basketballreference. This website has pretty much everything I need, including advanced stats/metrics from every player. I probably won't need assistance in getting it, I will just figure out the best method to get all of this data into one place - ie. if one season per file is best, or if I should load them all into one big file. 

Basketballreference sometimes has some funky formatting, for example if a player played for multiple teams in a season, they have separate stats and then a total stat - there is a team classified as '2TM' that I will need to work through. They also have headers every 20 or so players, which will just be annoying to remove for every season. Advanced stats and usage stuff that I may use are also on a separate tab from the 'basic' stats, so combining those may be a struggle, too. Calculating someone's 'years pro' may be tough, too - I haven't been able to find it on the website.


*Some Harvard students did a similar study about player development in the NBA back in 2015 (link: https://harvardsportsanalysis.org/2015/05/player-progression-in-the-nba/). 

*A man did try to predict NBA success based on the first few years and used a number of different measures/presentations (I really liked his decision trees), it gave me a few ideas but also had some differences.  https://www.kaggle.com/code/tombutton/predicting-nba-success

MIT's Sloan school which runs a lot of Sports Analytics stuff also published a paper about predicting success for players using both their pre-NBA and NBA data using a lot of advanced statistics. They focused on something called relevance-based prediction. (https://mitsloan.mit.edu/shared/ods/documents?PublicationDocumentID=10079)

All of these pieces are similar to what I'm doing, but aren't exactly the same. It does provide me with some preliminary info on what may be good/bad but I also think that I have a bit of my own path to chart with this. 

I have tried a number of different ways to get NBA data from each season. I'm wondering if there are any preloaded packages that I may be able to use. It's especially important for me to have the 'years pro' section for each player. I have tried manually downloading each CSV file for each NBA season (I did so for about the most recent 5 seasons, but realized that it was going to be a bit tedious), and have also tried to use hoopR and nbastatR, but may need assistance in how to obtain data from the past 21 NBA seasons. Below are some attempts, but I'm not sure where it gets me. 

```{r}
install.packages("hoopR")
install.packages("tictoc")
```

```{r}
tictoc::tic()
progressr::with_progress({
  nba_pbp <- hoopR::load_nba_pbp(season = 2024)
})
tictoc::toc()
```

Load NBA 2024 season stats
```{r}
nba24 <- read_excel("~/Downloads/nba24.xlsx", sheet = "nba24")
```


```{r}
devtools::install_github("abresler/nbastatR", force = TRUE)
```
```{r}
library(nbastatR)
```




----------- 
**ASSIGNMENT 2: Exploration**

I found a github repository of someone who used rookie data to predict a binary response variable, which was just whether or not a player had a career of >5 years (https://github.com/amitabh-bhattacharya/Classification-of-NBA-Rookiee-career-length/blob/master/nba.csv), (https://data.world/exercises/logistic-regression-exercise-1). This does seem useful, but I envision something a bit more complex. I plan on having a "threshold" and organizing it by position and stat - a bunch of different charts would need to be created (ie. for PG's, the comparison of rookie year APG vs career APG) that are kind of categorized based on what we want to see (or what has the highest predictive ability). I need to think more about if there is one all-encompassing value that can equate to a successful career - that is something I will think about more moving forward. 

After doing some more resarch, basketballreference has a page where it includes rookie data and then a section of it that includes only their rookie data, then their career stats. I've determined that this will be the data to use. 

In order to work with this data's predictive abilities, I will work with past data and will tighten the window so I don't have to take a bunch of time downloading datasets. I will use data from all draftees between 2007 and 2018. 


First, we can load in the 2007 data - this comes in two different files - one file (that I titled "rookie") contains each 2007 rookie's season stats, and the other (titled "career") contains a 2007 rookie's career stats. 




```{r}
library(readxl)
library(tidyverse)
library(dplyr)
library(ggplot2)

rookie07 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/2007rookie.xlsx", skip = 1)

career07 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/2007career.xlsx", skip = 1)
```

```{r}
head(rookie07)

rookie07 |>
  summarize(total_rows = n())

career07 |>
  summarize(total_rows = n())
```
There are 64 rows in both of the data sets. It contains 30 columns that measure different statistics like FG, Steals/Blocks, etc.

It covers all 82 games of the 2007 season. 

```{r}

print(colnames(rookie07))

print(colnames(career07))

str(rookie07)
```


Big struggle that took a while to figure out: Since there are the same columns names for totals and per game stats, R renamed some stat columns using an ellipses and the column number of the repeated variable. Additionally, I have to use the same stat for both datasets. After looking it up, I found the "rename" function which helps rename a variable (shocker) so that I am not confused as to if I'm using an average or total stat. Then, I have to merge the data so that I can use ggplot to compare a season stat to a career stat. 
```{r}
rookie07 <- rookie07 |>
  rename(PPG_r = `PTS...26`) 

career07 <- career07 |>
  rename(PPG_c = `PTS...26`) 


merged_data07 <- merge(rookie07, career07)

```
Evem though it says the "rename" function isn't working, I can still check the data and I see that there is a PPG_r and PPG_c column. Very interesting - I am curious as to why this is. 
```{r}
head(merged_data07)
```


I figured it was most appropriate to include a scatterplot instead of a line chart, because while we are technically looking at things over time, we don't have statistics on the trends (that would be a lot of data to work with, though I wish I could). 
```{r}
ggplot(merged_data07, aes(x = PPG_r.x, y = PPG_r.y)) +
  geom_point() +
  labs(x = "PPG Rookie Yr", y = "PPG career", title = "Rookie vs Career Games Played") +
  theme_minimal()

```

I am also a bit frustrated that a player's team's aren't listed for their career stats. I wish I was able to see which teams developed players best and measure some other things. Additionally, their position is not included, so I can't group data by position to analyze as I would've wanted. Shucks. I may need to create a new guiding prompt/question to research - this is getting tougher as I learn more about the data. I may want to distribute by age (done below) to distribute and answer questions instead. Would like to discuss this if we get the chance. If not, I'm willing to make a shift and try to work with some other datasets or come up with some totally new questions. 

```{r}
rookie07 |>
  group_by(Age) |>
  summarize(
    num_players = n()
    )
```


------------------------------------
### REFINING 10/20/2024
After some evaluation and feedback, I have decide to take a small shift - I won't be able to figure out which position each player plays, but I am able to figure out who they started their career with. We can also use age to figure out which strategy might be best when it comes to drafting. 


The next step of what we have to do is to figure out which teams actually drafted these players, since unfortunately basketball reference decided not to include that info. However, the `Debut` column includes which team each player first played for, so we can get ourselves pretty close to which team actually drafted a player. Obviously draft night trades occur, but in my opinion, the team takes a chance on a player by actually playing them so I don't think it matters who actually drafted them vs. who actually played them first if that makes sense. It also helps out those who were undrafted. If we are going to measure who develops players best, it begins with who they play for first. Thankfully we have mutate to use to help us. Also chatGPT assisted in figuring out how I can pull the first three letters of that column. 

```{r}
# Load necessary libraries
library(dplyr)
library(stringr)

rookie07 <- rookie07 |>
  mutate(first_team = str_sub(str_extract(Debut, ", [A-Z]{3}"), 3, 5)) |>
  mutate(year = "2007")
```
Now we know who was starting with who. 

A bit of the way through this, I realized that I should probably get all of the data in here first. Let's do that.

```{r}
##USE RAW LINKS FROM GITHUB INSTEAD OF DOWNLOADS

rookie08 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/08rookie.xlsx", skip = 1) %>%
  mutate(year = 2008,
         first_team = str_sub(str_extract(Debut, ", [A-Z]{3}"), 3, 5))

rookie09 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/09rookie.xlsx", skip = 1) %>%
  mutate(year = 2009,
         first_team = str_sub(str_extract(Debut, ", [A-Z]{3}"), 3, 5))

rookie10 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/11rookie.xlsx", skip = 1) %>%
  mutate(year = 2010,
         first_team = str_sub(str_extract(Debut, ", [A-Z]{3}"), 3, 5))

rookie11 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/12rookie.xlsx", skip = 1) %>%
  mutate(year = 2011,
         first_team = str_sub(str_extract(Debut, ", [A-Z]{3}"), 3, 5))

rookie12 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/13rookie.xlsx", skip = 1) %>%
  mutate(year = 2012,
         first_team = str_sub(str_extract(Debut, ", [A-Z]{3}"), 3, 5))

rookie13 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/14rookie.xlsx", skip = 1) %>%
  mutate(year = 2013,
         first_team = str_sub(str_extract(Debut, ", [A-Z]{3}"), 3, 5))

rookie14 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/15rookie.xlsx", skip = 1) %>%
  mutate(year = 2014,
         first_team = str_sub(str_extract(Debut, ", [A-Z]{3}"), 3, 5))

rookie15 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/16rookie.xlsx", skip = 1) %>%
  mutate(year = 2015,
         first_team = str_sub(str_extract(Debut, ", [A-Z]{3}"), 3, 5))

rookie16 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/17rookie.xlsx", skip = 1) %>%
  mutate(year = 2016,
         first_team = str_sub(str_extract(Debut, ", [A-Z]{3}"), 3, 5))

rookie17 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/18rookie.xlsx", skip = 1) %>%
  mutate(year = 2017,
         first_team = str_sub(str_extract(Debut, ", [A-Z]{3}"), 3, 5))


rookie_all_years <- bind_rows(rookie08, rookie09, rookie10, rookie11, rookie12, rookie13, rookie14, rookie15, rookie16, rookie17)


career08 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/08career.xlsx", skip = 1) %>%
  mutate(year = 2008)

career09 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/09career.xlsx", skip = 1) %>%
  mutate(year = 2009)

career10 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/11career.xlsx", skip = 1) %>%
  mutate(year = 2010)

career11 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/12career.xlsx", skip = 1) %>%
  mutate(year = 2011)

career12 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/13career.xlsx", skip = 1) %>%
  mutate(year = 2012)

career13 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/14career.xlsx", skip = 1) %>%
  mutate(year = 2013)

career14 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/15career.xlsx", skip = 1) %>%
  mutate(year = 2014)

career15 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/16career.xlsx", skip = 1) %>%
  mutate(year = 2015)

career16 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/17career.xlsx", skip = 1) %>%
  mutate(year = 2016)

career17 <- read_excel("/Users/sambenning/code/jour479x_fall_2024/presentations/18career.xlsx", skip = 1) %>%
  mutate(year = 2017)


career_all_years <- bind_rows(career08, career09, career10, career11, career12, career13, career14, career15, career16, career17)
```

```{r}
combined_data <- left_join(rookie_all_years, career_all_years, by = c("Player", "year"))

head(combined_data)

```

That's a lot of loading. 

Let's do some data analysis now. Again, the core question is: What early career stats help predict a player's upward or downward career trajectory over time? 

First, let's set what the average trajectory looks like. We will just look at a general correlation for PPG, RPG, APG, SPG, and BPG. I like correlation matrices, so let's see what that brings us. 
```{r}
combined_data_selected <- combined_data %>%
  select(Player, year, rookie_ppg = `PTS...26.x`, career_ppg = `PTS...26.y`,
         rookie_apg = `AST...28.x`, career_apg = `AST...28.y`,
         rookie_rpg = `TRB...27.x`, career_rpg = `TRB...27.y`, rookie_spg = `STL...29.x`, career_spg = `STL...29.y`, rookie_bpg = `BLK...30.x`, career_bpg = `BLK...30.y`, rookie_mpg = `MP...25.x`)
```

Now, how we learned was that you can look at the correlation of just x and y, but we want to make everything we selected comparable against each other. For this we can use another prompt in the cor() function.
```{r}
colnames(combined_data_selected)
```

```{r}
baseline_correlations <- combined_data_selected |> select("rookie_ppg","career_ppg","rookie_apg","career_apg", "rookie_rpg","career_rpg", "rookie_spg", "career_spg","rookie_bpg","career_bpg", "rookie_mpg") |>
  cor(use="complete.obs")

print(baseline_correlations)
```
This is a lot. Maybe we just look at offense.
```{r}
offense_cors <- combined_data_selected |> select("rookie_ppg","career_ppg","rookie_apg","career_apg", "rookie_rpg","career_rpg", "rookie_mpg") |>
  cor(use="complete.obs")

print(offense_cors)
```
We may be forgetting one thing - years played in the league. A high correlation can give us a hint to what might predict a long career. Let's add that in. 

```{r}
combined_data_selected <- combined_data %>%
  select(Player, year, career_length = `Yrs.y`, rookie_ppg = `PTS...26.x`, career_ppg = `PTS...26.y`,
         rookie_apg = `AST...28.x`, career_apg = `AST...28.y`,
         rookie_rpg = `TRB...27.x`, career_rpg = `TRB...27.y`, rookie_spg = `STL...29.x`, career_spg = `STL...29.y`, rookie_bpg = `BLK...30.x`, career_bpg = `BLK...30.y`,rookie_mpg = `MP...25.x`)

career_cors <- combined_data_selected |> select("rookie_ppg","rookie_apg", "rookie_rpg","rookie_spg", "rookie_bpg","rookie_mpg", "career_length") |>
  cor(use="complete.obs")

print(career_cors)
```
Well, this may not help us a lot. None of the correlation coefficients between `career_length` and any rookie stat have a value higher than 0.5, meaning that there really isn't enough data showing the two being paired together. I next want to see if this works better for per 36 statistics, though. I will use `mutate()` to create this statistic. 
```{r}
combined_data_base <- combined_data |> filter(`Yrs.y` >1, `MP...25.x` > 5) |> select(Player, year, career_length = `Yrs.y`, rookie_ppg = `PTS...26.x`, career_ppg = `PTS...26.y`,
         rookie_apg = `AST...28.x`, career_apg = `AST...28.y`,
         rookie_rpg = `TRB...27.x`, career_rpg = `TRB...27.y`, rookie_spg = `STL...29.x`, career_spg = `STL...29.y`, rookie_bpg = `BLK...30.x`, career_bpg = `BLK...30.y`, rookie_mpg = `MP...25.x`, career_mpg = `MP...25.y`)


per_36 <- combined_data_base |> 
  mutate(
    rookie_pp36 = (rookie_ppg / rookie_mpg) * 36,
    career_pp36 = (career_ppg / career_mpg) * 36,
    
    rookie_ap36 = (rookie_apg / rookie_mpg) * 36,
    career_ap36 = (career_apg / career_mpg) * 36,
    
    rookie_rp36 = (rookie_rpg / rookie_mpg) * 36,
    career_rp36 = (career_rpg / career_mpg) * 36,
    
    rookie_sp36 = (rookie_spg / rookie_mpg) * 36,
    career_sp36 = (career_spg / career_mpg) * 36,
    
    rookie_bp36 = (rookie_bpg / rookie_mpg) * 36,
    career_bp36 = (career_bpg / career_mpg) * 36
  )
```
I filtered so that each player has played more than a year in the league and so that each player had more than 5 minutes per game - some guys got a minute of fame, got a bucket, and got outta there - it was screwing up the data. Here come the new correlations. 
```{r}
rookie_p36_cors <- per_36 |> select("rookie_pp36","rookie_ap36", "rookie_rp36","rookie_sp36", "rookie_bp36","career_length") |>
  cor(use="complete.obs")

print(rookie_p36_cors)
```
So, this is actually worse. These variables show pretty much no correlation with `career_length`. We can keep going and see what other statistics work. 
```{r}
rookie_p36_cors <- per_36 |> select("rookie_pp36","rookie_ap36", "rookie_rp36","rookie_sp36", "rookie_bp36","career_pp36", "career_ap36", "career_rp36", "career_sp36", "career_bp36", "career_length") |>
  cor(use="complete.obs")
```


A few takeaways - scoring is valued more than anything in the league - as seen through how pp36 in rookie and career years have higher correlations to career length than anything else. Furthermore, defense is definitely not as valued at all compared to everything else in terms of career length. In terms of variables connected to each other in rookie and careers (ie rookie ppg to career ppg), they are always the highest of the given variables, but there is only some moderate correlation. Further analysis is needed. Also, these are hard and annoying to read. 

Clustering might help us here. It will allow us to group players based on similarities, so we can see if there are commonalities between players career paths. I should've done this before, but I am renaming each variable so they don't have the '...' or the '.y' in them.
```{r}
colnames(combined_data)
```
Thanks ChatGPT for not making me write all of this out.
```{r}
combined_data_renamed <- combined_data %>%
  select(
    rank_rookie = `Rk.x`,
    player = Player,
    debut_rookie = `Debut.x`,
    age_rookie = `Age.x`,
    years_rookie = `Yrs.x`,
    games_rookie = `G.x`,
    minutes_rookie = `MP...7.x`,
    field_goals_rookie = `FG.x`,
    field_goals_attempted_rookie = `FGA.x`,
    three_pointers_rookie = `3P.x`,
    three_pointers_attempted_rookie = `3PA.x`,
    free_throws_rookie = `FT.x`,
    free_throws_attempted_rookie = `FTA.x`,
    offensive_rebounds_rookie = `ORB.x`,
    total_rebounds_rookie = `TRB...15.x`,
    assists_rookie = `AST...16.x`,
    steals_rookie = `STL...17.x`,
    blocks_rookie = `BLK...18.x`,
    turnovers_rookie = `TOV.x`,
    personal_fouls_rookie = `PF.x`,
    points_rookie = `PTS...21.x`,
    field_goal_percentage_rookie = `FG%.x`,
    three_point_percentage_rookie = `3P%.x`,
    free_throw_percentage_rookie = `FT%.x`,
    minutes_per_game_rookie = `MP...25.x`,
    points_per_game_rookie = `PTS...26.x`,
    rebounds_per_game_rookie = `TRB...27.x`,
    assists_per_game_rookie = `AST...28.x`,
    steals_per_game_rookie = `STL...29.x`,
    blocks_per_game_rookie = `BLK...30.x`,
    year = year,
    first_team = first_team,
    rank_career = `Rk.y`,
    debut_career = `Debut.y`,
    age_career = `Age.y`,
    years_career = `Yrs.y`,
    games_career = `G.y`,
    minutes_career = `MP...7.y`,
    field_goals_career = `FG.y`,
    field_goals_attempted_career = `FGA.y`,
    three_pointers_career = `3P.y`,
    three_pointers_attempted_career = `3PA.y`,
    free_throws_career = `FT.y`,
    free_throws_attempted_career = `FTA.y`,
    offensive_rebounds_career = `ORB.y`,
    total_rebounds_career = `TRB...15.y`,
    assists_career = `AST...16.y`,
    steals_career = `STL...17.y`,
    blocks_career = `BLK...18.y`,
    turnovers_career = `TOV.y`,
    personal_fouls_career = `PF.y`,
    points_career = `PTS...21.y`,
    field_goal_percentage_career = `FG%.y`,
    three_point_percentage_career = `3P%.y`,
    free_throw_percentage_career = `FT%.y`,
    minutes_per_game_career = `MP...25.y`,
    points_per_game_career = `PTS...26.y`,
    rebounds_per_game_career = `TRB...27.y`,
    assists_per_game_career = `AST...28.y`,
    steals_per_game_career = `STL...29.y`,
    blocks_per_game_career = `BLK...30.y`
  ) |>
  na.omit()
```
Add back per-36.
```{r}
combined_data_renamed <- combined_data_renamed %>%
  mutate(
    rookie_pp36 = (points_rookie / minutes_rookie) * 36,
    career_pp36 = (points_career / minutes_career) * 36,
    
    rookie_ap36 = (assists_rookie / minutes_rookie) * 36,
    career_ap36 = (assists_career / minutes_career) * 36,
    
    rookie_rp36 = (total_rebounds_rookie / minutes_rookie) * 36,
    career_rp36 = (total_rebounds_career / minutes_career) * 36,
    
    rookie_sp36 = (steals_rookie / minutes_rookie) * 36,
    career_sp36 = (steals_career / minutes_career) * 36,
    
    rookie_bp36 = (blocks_rookie / minutes_rookie) * 36,
    career_bp36 = (blocks_career / minutes_career) * 36,
    
    rookie_top36 = (turnovers_rookie / minutes_rookie) * 36,
    career_top36 = (turnovers_career / minutes_career) * 36
  )

head(combined_data_renamed)

```

Now, let's cluster. First, select some variables to use that properly measure stuff. I made sure to choose variables that I didn't find to be related enough to avoid multicollinearity and other assumptions.
```{r}
cluster_vars <- combined_data_renamed |>
  select(age_rookie, years_career, rookie_pp36,career_pp36,rookie_ap36, career_ap36, rookie_rp36, career_rp36,rookie_sp36, career_sp36, rookie_bp36, career_bp36, rookie_top36, career_top36, field_goal_percentage_rookie, field_goal_percentage_career) |>
  na.omit()
```

Since I'm using per-36 stats, I'm not sure if I need to scale or not, but I will just to be safe. 
```{r}
scaled_players <- cluster_vars |>
  mutate_all(scale) |>
  na.omit()
```

I am going to use the elbow method as we learned in class to figure out the optimal number of k's. 
```{r}
# function to compute total within-cluster sum of square
wss <- function(k) {
  kmeans(scaled_players, k, nstart = 10 )$tot.withinss
}

# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15

# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)

plot(k.values, wss_values,
       type="b", pch = 19, frame = FALSE,
       xlab="Number of clusters K",
       ylab="Total within-clusters sum of squares")
```
I interpret that maybe 5 k's is appropriate. 
```{r}
k5 <- kmeans(scaled_players, centers = 5, nstart = 25)

k5
```
Looking at this clustering, cluster 1 had the an above average career length with positive stats for a lot of offensive scoring metrics and stocks. What stands out to me most is that this cluster has the lowest age on average as well. Let's check out the age averages of different clusters and put them on a scatterplot. 

Let's add player's names back to the data.
```{r}
players_cluster <- data.frame(combined_data_renamed, k5$cluster)
```

A similar measure of career length is the number of games that they've played. If we included years, it would look more like a step chart. 
```{r}
ggplot() +
  geom_point(data=players_cluster, aes(x=age_rookie, y=games_career, color = k5.cluster),size = 1.5, alpha = 0.8)
```
Lots of dark color up in the top left. Seems like taking young guys actually works out for some teams. But, we still see a number of data points showing that young rookies don't always pan out. Also, shoutout to 35 year old rookie Pablo Prigioni on the far right. 

We can keep looking through other criteria to see what may actually influence someone playing for a while. For example, if you make a fair share of your shots in your minutes as a rookie, will you play for a while?
```{r}
ggplot() +
  geom_point(data=players_cluster, aes(x=field_goal_percentage_rookie, y=games_career, color = k5.cluster),size = 1.5, alpha = 0.8)
```
Honestly, there is nothing here that we can say really sets someone apart here. There is no trend here. Well, to keep moving forward, let's look into this dataset, specifically cluster 5. 
```{r}
clusterone <- players_cluster |> filter(k5.cluster ==1)

View(clusterone)
```
A lot of all-stars and very solid role players on this list. Also, pretty much all guards. I wonder if these guys have a better chance of making it in the league compared to everyone else. This is the smallest cluster of them all, with only 68 players. Let's do some statistical analysis through regression and look at some other trends. We can then make a comparison. Since they are the group with the highest average career length, we will run a regression on this reduced model, select the proper variables, and then test the reduced model on the full model of all the data.

We will use all of the rookie statistical variables first on this model. I tried to remove some outliers of players who skewed their own per-36 stats. 
```{r}
library(car)
filtered_players_cluster <- players_cluster |> filter(games_career > 30)

clusterone <- filtered_players_cluster |> filter(k5.cluster == 1)
```


```{r}
clusteronemodel <- lm(years_career~ age_rookie + games_rookie + 
            minutes_rookie + field_goals_rookie + three_pointers_rookie +
            free_throws_rookie + offensive_rebounds_rookie + total_rebounds_rookie +
            assists_rookie + steals_rookie + blocks_rookie + turnovers_rookie +
            personal_fouls_rookie + field_goal_percentage_rookie +
            three_point_percentage_rookie + free_throw_percentage_rookie + 
            rookie_pp36 + rookie_ap36 + rookie_rp36 + rookie_sp36 + rookie_bp36 + rookie_top36, 
            data = clusterone)|>
  na.omit()
```

As I learned in another stat class, VIFs help us first work with multicollinearity (aka variables related to each other, which is bad and makes analysis invalid). Basically, anything with a VIF below 5 is good. Anything above 10 is bad and should be removed. 
```{r}
vifs <- vif(clusteronemodel)

vifs
```
So, now we can definitely remove minutes, field goals, total rebounds, assists, turnovers, personal fouls, steals and blocks. Let's see where that gets us. 
```{r}
clusteronereduced <- lm(years_career~ age_rookie + games_rookie + three_pointers_rookie +
            free_throws_rookie + offensive_rebounds_rookie + field_goal_percentage_rookie +
            three_point_percentage_rookie + free_throw_percentage_rookie + 
            rookie_pp36 + rookie_ap36 + rookie_rp36 + rookie_sp36 + rookie_bp36 + rookie_top36, 
            data = clusterone)
```

```{r}
vifsred <- vif(clusteronereduced)
vifsred
```
Everything below 5. Lovely. Summarize the model.
```{r}
summary(clusteronereduced)
```
This data shows us that only offensive rebounds from this specific cluster of solid players statistically stands out as something that is even generally related to how long someone plays in the league. The associated coefficient with this variable is 0.04, meaning that for every additional offensive rebound a player gets in their career, they are expected to add on 0.04 years, or ~14 days. If you do the math, 26 offensive rebounds is projected to add on a full year of a player's career! That statement is probably a stretch - in this case, it isn't really an if ___, then ___. More will be explained after the next step.

Let's go to the full model and see if offensive rebounds as a determinant for career length holds. 
```{r}
fulloreb <-lm(years_career ~ offensive_rebounds_rookie, data = filtered_players_cluster)

summary(fulloreb)
```
This definitely holds at the population level - the p value is very low. The coefficient is 0.03, meaning that there is a positive relationship between rookie offensive rebounding and career length. Again, I wouldn't be so sure of using this logically as an input-output predictor. However, it does show the general trend that teams tend to keep guys around who hustle and crash the offensive glass. I believe that it shows someone who makes hustle plays and puts in the extra effort where it counts. It is reflective of a player's character if they do this small thing like getting o-boards. 

We can go further into the full model and see if we can find other variables that help us out. This will be the same process as we just did. 
```{r}
fullmodel <- lm(years_career ~ age_rookie + games_rookie + 
            minutes_rookie + field_goals_rookie + three_pointers_rookie +
            free_throws_rookie + offensive_rebounds_rookie + total_rebounds_rookie +
            assists_rookie + steals_rookie + blocks_rookie + turnovers_rookie +
            personal_fouls_rookie + field_goal_percentage_rookie +
            three_point_percentage_rookie + free_throw_percentage_rookie + 
            rookie_pp36 + rookie_ap36 + rookie_rp36 + rookie_sp36 + rookie_bp36 + rookie_top36, 
            data = filtered_players_cluster)

vifsfull <- vif(fullmodel)
vifsfull
```


```{r}
fullmodel2 <- lm(years_career ~ age_rookie + games_rookie + 
            three_pointers_rookie + free_throws_rookie + steals_rookie + blocks_rookie + offensive_rebounds_rookie + blocks_rookie + field_goal_percentage_rookie + three_point_percentage_rookie + free_throw_percentage_rookie + rookie_pp36 + rookie_ap36 + rookie_rp36 + rookie_sp36 + rookie_bp36 + rookie_top36, data = filtered_players_cluster)
summary(fullmodel2)
```
Alright, this is better. R can also help us pick the variables that we need in this process called stepwise selection. It will basically just test how good the model is on a bunch of different combinations of the variables that you give it, and will pick which one is the most statisically significant. This long list is basically just the software testing it, and the equation at the bottom is the model that we should use. 
```{r}
step(fullmodel2)
```
Now we can officially fit the final full best fit model, aka the parsimonious model. 

```{r}
finalfullmodel<-lm(years_career ~ age_rookie + games_rookie + free_throws_rookie + 
    offensive_rebounds_rookie + field_goal_percentage_rookie + 
    free_throw_percentage_rookie, data = filtered_players_cluster)

summary(finalfullmodel)
```
This looks pretty decent in terms of 'predicting predictors'. First, we can look at the p value for the full model - it is pretty much zero, meaning there is minimal likelihood of error when using the holistic edition of the model. In terms of the adjrsquared,  it shows us that these predictors from rookie seasons account for a bit more than 25% of the changes in how long a guy might stay in the league for. Usually this wouldn't be great, but considering that these are just the 'foundational' stats, and nothing is advanced stats, it isn't bad. It does imply that there are a bunch of other factors that play into this, though. Understandable. The residual summary shows us that we can kind of get somewhat comfortable when using this model as a predictor, and might be ~75% sure about predicting a 5 year window of someone's career. This isn't great, but it at least gives us the opportunity to generally categorize players after seeing their rookie year stats. 

In terms of specific predictors, there are a few things that we can be pretty certain about with their relationship to how many years a player will last in the league. In stats, a comfortable number for us to use is an alpha of 0.05, meaning that if any predictor with a corresponding p value that is less than 0.05, we can be trust that it'll do well in analysis/prediction. Age is most significant, and its coefficient is negative, meaning younger is better. Rookie year free throws and percentage seem to play a pretty big part in predicting someone's career length. 

```{r}

```




A separate question - are there teams that draft players who stick around for a while? Are there teams who happen to draft players who are hurt/injured more? Who drafts the best scorers/rebounders/etc.? 
